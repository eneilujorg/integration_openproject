// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AdminSettings.vue Nextcloud OAuth values form edit mode should show the form and hide the field values 1`] = `
Wrapper {
  "selector": ".nextcloud-oauth-values",
}
`;

exports[`AdminSettings.vue Nextcloud OAuth values form view mode with complete values should show the field values and hide the form 1`] = `
Wrapper {
  "selector": ".nextcloud-oauth-values",
}
`;

exports[`AdminSettings.vue OpenProject OAuth values form edit mode should show the form and hide the field values 1`] = `
Wrapper {
  "selector": ".openproject-oauth-values",
}
`;

exports[`AdminSettings.vue OpenProject OAuth values form view mode and completed state should show field values and hide the form if server host form is complete 1`] = `
Wrapper {
  "selector": ".openproject-oauth-values",
}
`;

exports[`AdminSettings.vue Project folders form (Project Folder Setup) view mode without project folder setup should show status as "Inactive" 1`] = `
Wrapper {
  "selector": ".project-folder-setup",
}
`;

exports[`AdminSettings.vue default user configurations form should be visible when the integration is complete 1`] = `
Wrapper {
  "selector": ".default-prefs",
}
`;

exports[`AdminSettings.vue server host url form edit mode cancel button should be visible when the form is in completed state with edit mode 1`] = `
VueWrapper {
  "_emitted": {},
  "_emittedByOrder": [],
  "isFunctionalComponent": undefined,
  "selector": "[data-test-id="cancel-edit-server-host-btn"]",
}
`;

exports[`AdminSettings.vue server host url form edit mode readonly state should clear the readonly state when clicked on the input 1`] = `
Wrapper {
  "selector": "#openproject-oauth-instance > .text-input-input-wrapper > input",
}
`;

exports[`AdminSettings.vue server host url form edit mode readonly state should set the input field to readonly at first 1`] = `
Wrapper {
  "selector": "#openproject-oauth-instance > .text-input-input-wrapper > input",
}
`;

exports[`AdminSettings.vue server host url form edit mode submit button should set the input to error state and display correct message when the url is invalid 1`] = `
VueWrapper {
  "_emitted": {
    "focus": [
      [
        FocusEvent {
          "isTrusted": true,
        },
      ],
    ],
  },
  "_emittedByOrder": [
    {
      "args": [
        FocusEvent {
          "isTrusted": true,
        },
      ],
      "name": "focus",
    },
  ],
  "isFunctionalComponent": undefined,
  "selector": ".text-input",
}
`;

exports[`AdminSettings.vue server host url form edit mode submit button should set the input to error state and display correct message when the url is invalid 2`] = `
VueWrapper {
  "_emitted": {
    "focus": [
      [
        FocusEvent {
          "isTrusted": true,
        },
      ],
    ],
  },
  "_emittedByOrder": [
    {
      "args": [
        FocusEvent {
          "isTrusted": true,
        },
      ],
      "name": "focus",
    },
  ],
  "isFunctionalComponent": undefined,
  "selector": ".text-input",
}
`;

exports[`AdminSettings.vue server host url form edit mode submit button should set the input to error state and display correct message when the url is invalid 3`] = `
VueWrapper {
  "_emitted": {
    "focus": [
      [
        FocusEvent {
          "isTrusted": true,
        },
      ],
    ],
  },
  "_emittedByOrder": [
    {
      "args": [
        FocusEvent {
          "isTrusted": true,
        },
      ],
      "name": "focus",
    },
  ],
  "isFunctionalComponent": undefined,
  "selector": ".text-input",
}
`;

exports[`AdminSettings.vue server host url form edit mode submit button should set the input to error state and display correct message when the url is invalid 4`] = `
VueWrapper {
  "_emitted": {
    "focus": [
      [
        FocusEvent {
          "isTrusted": true,
        },
      ],
    ],
  },
  "_emittedByOrder": [
    {
      "args": [
        FocusEvent {
          "isTrusted": true,
        },
      ],
      "name": "focus",
    },
  ],
  "isFunctionalComponent": undefined,
  "selector": ".text-input",
}
`;

exports[`AdminSettings.vue server host url form edit mode submit button should set the input to error state and display correct message when the url is invalid 5`] = `
VueWrapper {
  "_emitted": {
    "focus": [
      [
        FocusEvent {
          "isTrusted": true,
        },
      ],
    ],
  },
  "_emittedByOrder": [
    {
      "args": [
        FocusEvent {
          "isTrusted": true,
        },
      ],
      "name": "focus",
    },
  ],
  "isFunctionalComponent": undefined,
  "selector": ".text-input",
}
`;

exports[`AdminSettings.vue server host url form edit mode submit button should set the input to error state and display correct message when the url is invalid 6`] = `
VueWrapper {
  "_emitted": {
    "focus": [
      [
        FocusEvent {
          "isTrusted": true,
        },
      ],
    ],
  },
  "_emittedByOrder": [
    {
      "args": [
        FocusEvent {
          "isTrusted": true,
        },
      ],
      "name": "focus",
    },
  ],
  "isFunctionalComponent": undefined,
  "selector": ".text-input",
}
`;

exports[`AdminSettings.vue server host url form edit mode submit button should set the input to error state and display correct message when the url is invalid 7`] = `
VueWrapper {
  "_emitted": {
    "focus": [
      [
        FocusEvent {
          "isTrusted": true,
        },
      ],
    ],
  },
  "_emittedByOrder": [
    {
      "args": [
        FocusEvent {
          "isTrusted": true,
        },
      ],
      "name": "focus",
    },
  ],
  "isFunctionalComponent": undefined,
  "selector": ".text-input",
}
`;

exports[`AdminSettings.vue server host url form edit mode submit button should set the input to error state and display correct message when the url is invalid 8`] = `
VueWrapper {
  "_emitted": {
    "focus": [
      [
        FocusEvent {
          "isTrusted": true,
        },
      ],
    ],
  },
  "_emittedByOrder": [
    {
      "args": [
        FocusEvent {
          "isTrusted": true,
        },
      ],
      "name": "focus",
    },
  ],
  "isFunctionalComponent": undefined,
  "selector": ".text-input",
}
`;

exports[`AdminSettings.vue server host url form edit mode submit button should set the input to error state and display correct message when the url is invalid 9`] = `
VueWrapper {
  "_emitted": {
    "focus": [
      [
        FocusEvent {
          "isTrusted": true,
        },
      ],
    ],
  },
  "_emittedByOrder": [
    {
      "args": [
        FocusEvent {
          "isTrusted": true,
        },
      ],
      "name": "focus",
    },
  ],
  "isFunctionalComponent": undefined,
  "selector": ".text-input",
}
`;

exports[`AdminSettings.vue server host url form view mode and completed state reset button should be visible when the form is in completed state 1`] = `
VueWrapper {
  "_emitted": {},
  "_emittedByOrder": [],
  "isFunctionalComponent": undefined,
  "selector": "[data-test-id="reset-server-host-btn"]",
}
`;

exports[`AdminSettings.vue server host url form view mode and completed state should show field value and hide the input field 1`] = `
Wrapper {
  "selector": ".openproject-server-host",
}
`;
